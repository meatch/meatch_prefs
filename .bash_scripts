#===================================
#
# .bash_scripts
#
#===================================*/

# --------------------------------------------------------------
# Reloading and Changing ZSH
# --------------------------------------------------------------
alias zshreload="source ~/.zshrc; echo 'reloaded ZSH and Bash'"

# --------------------------------------------------------------
# GIT
# --------------------------------------------------------------
alias gst="git status"
alias gbv="git branch -vva"
alias gbvg="git branch -vva | grep -i $1"
alias gbvb="git for-each-ref --format='%(color:cyan)%(authordate:format:%m/%d/%Y %I:%M %p) %(align:25,left)%(color:yellow)%(authorname)%(end) %(color:reset)%(refname:strip=3)' --sort=authorname refs/remotes"
alias glo="git log --oneline"
alias gloa="git log --author=\"Mitch Gohman\" --oneline"
alias glow="git log --oneline --all --graph --decorate"
alias gfp="git fetch -p"

function grhard {
    echo '>>>> Start clean, reset, and checkout';
    set -x;
    git clean -df;
    git reset --hard;
    git checkout .;
    echo '<<<< End clean, reset, and checkout';
}

function grib() {
    git rebase -i origin/$1
}

function dockerPruneAll() {
    bash '/Volumes/MeatchPod/WEBWORKS/Dev Library/Tools/docker-tools/scripts/docker-prune-all.sh'
}

# --------------------------------------------------------------
# TNP
# --------------------------------------------------------------
function tnpRebuild() {
    docker stop noun-www-1 noun-webpack-1
    docker compose build www
    docker compose up -d www webpack
}

function tnpRebuildAll() {
    docker compose down
    docker compose up -d --build
}

function tnpRestart() {
    docker compose down www webpack nginx
    docker compose up -d www webpack nginx
}

function tnpRestartAll() {
    docker compose restart
}

function tnpTest() {
    local test_file="$1"
    local test_name="$2"
    local update_flag=""

    # Handle optional third argument for snapshot updating
    if [ "$3" = "update" ]; then
        update_flag="--updateSnapshot"
    fi

    if [ -z "$test_file" ]; then
        # No arguments — run all tests with snapshot updates
        docker compose exec www bash -c "yarn jest:update"
    elif [ -z "$test_name" ]; then
        # One argument — run the full test file
        docker compose exec www bash -c "yarn run jest -i \"$test_file\" $update_flag"
    else
        # Two arguments — run a specific test within the test file
        docker compose exec www bash -c "yarn run jest -i \"$test_file\" -t \"$test_name\" $update_flag"
    fi
}


# This will evaluate our python files to make sure they conform to linters
# will also reformat for us, so no guesswork
# great to avoid complications on gtihub actions (CICD) python linter checks
function tnpBlackCheck() {
    # Usage:
    #   blackCheck                      # check entire repo (like CI)
    #   blackCheck noun_project/...py   # check a specific file or directory
    local target="${1:-.}"

    echo ">>> Running Black check for: $target"

    # Try inside Docker container first
    if docker ps --format '{{.Names}}' | grep -qx "noun-www-1"; then
        # Ensure black exists in the container
        if docker exec noun-www-1 sh -lc 'command -v black >/dev/null 2>&1'; then
            # Try common app roots inside container and pick the first that matches
            local bases=("/app" "/usr/src/app" "/workspace" "")
            local base
            for base in "${bases[@]}"; do
                if docker exec noun-www-1 sh -lc "[ -e '${base}/${target}' ] || [ '${target}' = '.' ]"; then
                    echo "(container) black --check --diff ${base:+(cd $base && )}$target"
                    if [ -n "$base" ] && [ "$target" != "." ]; then
                        docker exec -it noun-www-1 sh -lc "cd '$base' && black --version && black --check --diff '$target'"
                    elif [ -n "$base" ] && [ "$target" = "." ]; then
                        docker exec -it noun-www-1 sh -lc "cd '$base' && black --version && black --check --diff ."
                    else
                        docker exec -it noun-www-1 sh -lc "black --version && black --check --diff '$target'"
                    fi
                    return $?
                fi
            done
        else
            echo "NOTE: 'black' not found inside container noun-www-1; falling back to local."
        fi
    fi

    # Fallback: run locally
    if command -v black >/dev/null 2>&1; then
        black --version
        black --check --diff "$target"
    else
        echo "ERROR: 'black' not found locally or in container. Install with: pip install black"
        return 127
    fi
}


function tnpGitAuth() {
    # Consolidated TNP SSH/Git auth helper
    # Usage:
    #   tnpGitAuth           # clear agent, add TNP key, test SSH, fix remote if needed
    #   tnpGitAuth keep      # keep existing keys loaded, still ensure TNP key is present

    local key="$HOME/.ssh/tnp/tnp_mitchtnp_id_rsa"
    local clear="${1:-clear}"

    echo ">>> TNP Git auth: ensuring correct key and host alias"

    # Optionally clear agent to avoid wrong key being attempted first
    if [ "$clear" != "keep" ]; then
        echo "Clearing keys from ssh-agent..."
        ssh-add -D >/dev/null 2>&1 || true
    fi

    # Add the intended key if not already loaded
    if ! ssh-add -l 2>/dev/null | grep -q "tnp_mitchtnp_id_rsa"; then
        echo "Adding $key to ssh-agent..."
        ssh-add "$key"
    else
        echo "Key already loaded: $key"
    fi

    # Sanity-check that ~/.ssh/config maps github-tnp -> correct identity
    echo "Checking ssh config for host 'github-tnp'..."
    if ! ssh -G github-tnp 2>/dev/null | grep -qi "^identityfile .*tnp_mitchtnp_id_rsa"; then
        echo "WARNING: 'github-tnp' in ~/.ssh/config may not point to $key"
        echo "Add this block to ~/.ssh/config if needed:"
        echo "Host github-tnp\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/tnp/tnp_mitchtnp_id_rsa\n  IdentitiesOnly yes\n  AddKeysToAgent yes\n  UseKeychain yes"
    fi

    echo ">>> Testing SSH connection to github-tnp..."
    # Do not fail the whole function if the banner check exits non-zero
    ssh -T git@github-tnp || true

    # If inside a git repo, ensure origin uses the host alias instead of github.com
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        local current_url
        current_url=$(git remote get-url origin 2>/dev/null || echo "")
        if [[ "$current_url" == git@github.com:* ]]; then
            local path="${current_url#git@github.com:}"
            echo ">>> Updating 'origin' to use host alias github-tnp..."
            git remote set-url origin "git@github-tnp:$path"
            git remote -v
        fi
    fi

    echo "<<< Done"
}

function tnpNextLogs() {
    docker exec -it noun-www-1 pm2 logs --lines 100
}
