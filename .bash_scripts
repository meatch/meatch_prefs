#===================================
#
# .bash_scripts
#
#===================================*/

# --------------------------------------------------------------
# Reloading and Changing ZSH
# --------------------------------------------------------------
alias zshreload="source ~/.zshrc; echo 'reloaded ZSH and Bash'"

# --------------------------------------------------------------
# GIT
# --------------------------------------------------------------
alias gst="git status"
alias gbv="git branch -vva"
alias gbvg="git branch -vva | grep -i $1"
alias gbvb="git for-each-ref --format='%(color:cyan)%(authordate:format:%m/%d/%Y %I:%M %p) %(align:25,left)%(color:yellow)%(authorname)%(end) %(color:reset)%(refname:strip=3)' --sort=authorname refs/remotes"
alias glo="git log --oneline"
alias gloa="git log --author=\"Mitch Gohman\" --oneline"
alias glow="git log --oneline --all --graph --decorate"
alias gfp="git fetch -p"

function grhard {
    echo '>>>> Start clean, reset, and checkout';
    set -x;
    git clean -df;
    git reset --hard;
    git checkout .;
    echo '<<<< End clean, reset, and checkout';
}

function grib() {
    git rebase -i origin/$1
}

# --------------------------------------------------------------
# TNP
# --------------------------------------------------------------
function tnpRebuild() {
    docker stop noun-www-1 noun-webpack-1
    docker compose build www
    docker compose up -d www webpack
}

function tnpRebuildAll() {
    docker compose down
    docker compose up -d --build
}

function tnpRestart() {
    docker compose down www webpack nginx
    docker compose up -d www webpack nginx
}

function tnpRestartAll() {
    docker compose restart
}

function tnpTest() {
    local test_file="$1"
    local test_name="$2"
    local update_flag=""

    # Handle optional third argument for snapshot updating
    if [ "$3" = "update" ]; then
        update_flag="--updateSnapshot"
    fi

    if [ -z "$test_file" ]; then
        # No arguments — run all tests with snapshot updates
        docker compose exec www bash -c "yarn jest:update"
    elif [ -z "$test_name" ]; then
        # One argument — run the full test file
        docker compose exec www bash -c "yarn run jest -i \"$test_file\" $update_flag"
    else
        # Two arguments — run a specific test within the test file
        docker compose exec www bash -c "yarn run jest -i \"$test_file\" -t \"$test_name\" $update_flag"
    fi
}

function tnpResetGit() {
    echo ">>> Ensuring correct SSH key for github-tnp..."

    # Check if the tnp key is already loaded
    ssh-add -l | grep 'tnp/id_rsa' > /dev/null
    if [ $? -ne 0 ]; then
        echo "Loading ~/.ssh/tnp/id_rsa into SSH agent..."
        ssh-add ~/.ssh/tnp/id_rsa
    else
        echo "TNP key already loaded in SSH agent."
    fi

    echo ">>> Testing SSH connection to github-tnp..."
    ssh -T git@github-tnp
}

function resetSshKeys() {
    echo ">>> Resetting SSH keys in preferred order..."

    # Load TNP key first to ensure it's offered to GitHub before the default personal key
    echo "Loading ~/.ssh/tnp/tnp_mitchtnp_id_rsa (TNP)..."
    ssh-add ~/.ssh/tnp/tnp_mitchtnp_id_rsa

    echo "Loading ~/.ssh/enspyred/id_rsa..."
    ssh-add ~/.ssh/enspyred/id_rsa

    echo "Loading ~/.ssh/id_rsa (default personal key)..."
    ssh-add ~/.ssh/id_rsa

    echo ">>> SSH keys added. Current agent keys:"
    ssh-add -l
}